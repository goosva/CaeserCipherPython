import string

### DO NOT MODIFY THIS FUNCTION ###
def load_words(file_name):
    '''
    file_name (string): the name of the file containing
    the list of words to load

    Returns: a list of valid words. Words are strings of lowercase letters.

    Depending on the size of the word list, this function may
    take a while to finish.
    '''
    print('Loading word list from file...')
    # inFile: file
    in_file = open(file_name, 'r')
    # line: string
    line = in_file.readline()
    # word_list: list of strings
    word_list = line.split()
    print('  ', len(word_list), 'words loaded.')
    in_file.close()
    return word_list

### DO NOT MODIFY THIS FUNCTION ###
def is_word(word_list, word):
    '''
    Determines if word is a valid word, ignoring
    capitalization and punctuation

    word_list (list): list of words in the dictionary.
    word (string): a possible word.

    Returns: True if word is in word_list, False otherwise

    Example:
    >>> is_word(word_list, 'bat') returns
    True
    >>> is_word(word_list, 'asdf') returns
    False
    '''
    word = word.lower()
    word = word.strip(" !@#$%^&*()-_+={}[]|\:;'<>?,./\"")
    return word in word_list

### DO NOT MODIFY THIS FUNCTION ###
def get_story_string():
    """
    Returns: a joke in encrypted text.
    """
    f = open("story.txt", "r")
    story = str(f.read())
    f.close()
    return story

WORDLIST_FILENAME = 'words.txt'

class Message(object):
    ### DO NOT MODIFY THIS METHOD ###
    def __init__(self, text):
        '''
        Initializes a Message object

        text (string): the message's text

        a Message object has two attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words
        '''
        self.message_text = text
        self.valid_words = load_words(WORDLIST_FILENAME)

    ### DO NOT MODIFY THIS METHOD ###
    def get_message_text(self):
        '''
        Used to safely access self.message_text outside of the class

        Returns: self.message_text
        '''
        return self.message_text

    ### DO NOT MODIFY THIS METHOD ###
    def get_valid_words(self):
        '''
        Used to safely access a copy of self.valid_words outside of the class

        Returns: a COPY of self.valid_words
        '''
        return self.valid_words[:]

    def build_shift_dict(self, shift):
        '''
        Creates a dictionary that can be used to apply a cipher to a letter.
        The dictionary maps every uppercase and lowercase letter to a
        character shifted down the alphabet by the input shift. The dictionary
        should have 52 keys of all the uppercase letters and all the lowercase
        letters only.

        shift (integer): the amount by which to shift every letter of the
        alphabet. 0 <= shift < 26

        Returns: a dictionary mapping a letter (string) to
                 another letter (string).
        '''
        newDict = {} #create empty dictionary
        #this for loop will map lowercase letter to the letter after shift and add to dict
        for x in range (len(string.ascii_lowercase)): #for every letter in the string
          if x < len(string.ascii_lowercase)-shift:
            newDict[string.ascii_lowercase[x]] = string.ascii_lowercase[x+shift] #add the letter with shift to the new dictionary
          else:
            newDict[string.ascii_lowercase[x]] = string.ascii_lowercase[x-26+shift] #add the letter with shift - len string to the new dictionary

        #this for loop will map uppercase letter to the letter after shift and add to dict
        for x in range (len(string.ascii_uppercase)): #for every letter in the string
          if x < len(string.ascii_uppercase)-shift:
            newDict[string.ascii_uppercase[x]] = string.ascii_uppercase[x+shift] #add the letter with shift to the new dictionary
          else:
            newDict[string.ascii_uppercase[x]] = string.ascii_uppercase[x-26+shift] #add the letter with shift - len string to the new dictionary
        return newDict


    def apply_shift(self, shift):
        '''
        Applies the Caesar Cipher to self.message_text with the input shift.
        Returns the message text in which every character is shifted down
        the alphabet by the input shift.

        shift (integer): the shift with which to encrypt the message.
        0 <= shift < 26

        Returns: the message text (string) in which every character is shifted
             down the alphabet by the input shift
        '''
        newMessage = "" #create empty string
        for x in range (len(self.message_text)): #for every letter in the string
          if self.message_text[x] in self.build_shift_dict(shift): #if the letter is in the dictionary
            newMessage += self.build_shift_dict(shift)[self.message_text[x]] #add the letter with shift to the new string
            #print (newMessage)
          else:
            newMessage += self.message_text[x] #add the letter to the new string
        return newMessage


class PlaintextMessage(Message):
    def __init__(self, text, shift):
        '''
        Initializes a PlaintextMessage object

        text (string): the message's text
        shift (integer): the shift associated with this message

        A PlaintextMessage object inherits from Message and has five attributes:
            self.message_text (string, determined by input text)
            self.valid_words (list, determined using helper function load_words)
            self.shift (integer, determined by input shift)
            self.encrypting_dict (dictionary, built using shift)
            self.message_text_encrypted (string, created using shift)
        '''
        # Use the parent class constructor to initialize message text and valid words
        super().__init__(text) #initializes message and valid words
        self.shift = shift
        self.encrypting_dict = self.build_shift_dict(shift)
        self.message_text_encrypted = self.apply_shift(shift)


    def get_shift(self):
        '''
        Returns: self.shift
        '''
        return self.shift

    def get_encrypting_dict(self):
        '''
        Returns: a COPY of self.encrypting_dict
        '''
        return self.encrypting_dict.copy()

    def get_message_text_encrypted(self):
        '''
        Returns: self.message_text_encrypted
        '''
        return self.message_text_encrypted

    def change_shift(self, shift):
        '''
        Changes self.shift of the PlaintextMessage and updates other
        attributes determined by shift (ie. self.encrypting_dict and
        message_text_encrypted).
        '''
        self.shift = shift
        self.encrypting_dict = self.build_shift_dict(shift)
        self.message_text_encrypted = self.apply_shift(shift)


class CiphertextMessage(Message):
    def __init__(self, text):
        '''
        Initializes a CiphertextMessage object

        text (string): the message's text
        '''
        super().__init__(text)

    def decrypt_message(self):
        '''
        Decrypts self.message_text by trying every possible shift value
        and finds the "best" one (the shift that results in the highest
        number of valid words).

        Returns: a tuple of the best shift value and the decrypted message
        '''
        best_shift = 0
        best_decrypted_message = ""
        max_valid_words = 0

        # Try every shift from 0 to 25
        for shift in range(26):
            decrypted_message = self.apply_shift(shift)
            # Count how many valid words are in the decrypted message
            valid_word_count = sum(1 for word in decrypted_message.split() if is_word(self.valid_words, word))

            # Update the best shift if we find a shift with more valid words
            if valid_word_count > max_valid_words:
                max_valid_words = valid_word_count
                best_shift = shift
                best_decrypted_message = decrypted_message

        return (best_shift, best_decrypted_message)


# Example test case (PlaintextMessage)
plaintext = PlaintextMessage('hello', 2)
print('Expected Output: jgnnq')
print('Actual Output:', plaintext.get_message_text_encrypted())

# Example test case (CiphertextMessage)
ciphertext = CiphertextMessage('jgnnq')
print('Expected Output:', (24, 'hello'))
print('Actual Output:', ciphertext.decrypt_message())

story = CiphertextMessage(get_story_string())
print(story.decrypt_message())
